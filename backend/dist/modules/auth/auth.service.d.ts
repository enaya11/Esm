import { Repository } from 'typeorm';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { User } from '../../entities/user.entity';
import { UserActivity } from '../../entities/user-activity.entity';
import { Referral } from '../../entities/referral.entity';
import { TelegramAuthDto } from './dto/telegram-auth.dto';
import { VerifyCodeDto } from './dto/verify-code.dto';
import { JwtPayload } from './interfaces/jwt-payload.interface';
export declare class AuthService {
    private readonly userRepository;
    private readonly activityRepository;
    private readonly referralRepository;
    private readonly jwtService;
    private readonly configService;
    private readonly logger;
    private verificationCodes;
    constructor(userRepository: Repository<User>, activityRepository: Repository<UserActivity>, referralRepository: Repository<Referral>, jwtService: JwtService, configService: ConfigService);
    authenticateWithTelegram(telegramAuthDto: TelegramAuthDto, ipAddress?: string, userAgent?: string): Promise<any>;
    verifyTelegramCode(verifyCodeDto: VerifyCodeDto, ipAddress?: string, userAgent?: string): Promise<any>;
    checkVerificationCodeStatus(code: string): Promise<any>;
    handleTelegramWebhook(update: any): Promise<any>;
    private handleLoginRequest;
    private handleVerificationCodeFromBot;
    registerUserFromBot(userData: any, ipAddress?: string, userAgent?: string): Promise<any>;
    private createUserFromVerification;
    private updateUserFromVerification;
    private createNewUserFromBot;
    private generateVerificationCode;
    private generateReferralCode;
    private cleanupExpiredCodes;
    getPlatformStats(): Promise<any>;
    private verifyTelegramAuth;
    private updateExistingUser;
    private createNewUser;
    getUserProfile(userId: string): Promise<any>;
    logout(userId: string, ipAddress?: string, userAgent?: string): Promise<void>;
    private logActivity;
    validateJwtPayload(payload: JwtPayload): Promise<User | null>;
}
