import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
  ManyToOne,
  JoinColumn,
  Index,
} from 'typeorm';
import { User } from './user.entity';

export enum ActivityType {
  ACCOUNT_CREATED = 'account_created',
  LOGIN = 'login',
  LOGOUT = 'logout',
  COINS_CLAIMED = 'coins_claimed',
  PACKAGE_PURCHASED = 'package_purchased',
  PACKAGE_ACTIVATED = 'package_activated',
  REFERRAL_MADE = 'referral_made',
  REFERRAL_BONUS_RECEIVED = 'referral_bonus_received',
  TASK_COMPLETED = 'task_completed',
  WITHDRAWAL_REQUESTED = 'withdrawal_requested',
  WITHDRAWAL_COMPLETED = 'withdrawal_completed',
  SECURITY_EVENT = 'security_event',
  ADMIN_ACTION = 'admin_action',
}

@Entity('user_activities')
@Index(['userId'])
@Index(['activityType'])
@Index(['createdAt'])
export class UserActivity {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ name: 'user_id' })
  userId: string;

  @Column({ name: 'activity_type', type: 'enum', enum: ActivityType })
  activityType: ActivityType;

  @Column({ nullable: true })
  description: string;

  @Column({ type: 'jsonb', nullable: true })
  metadata: any;

  @Column({ name: 'ip_address', nullable: true })
  ipAddress: string;

  @Column({ name: 'user_agent', nullable: true })
  userAgent: string;

  @Column({ name: 'amount', type: 'decimal', precision: 18, scale: 8, nullable: true })
  amount: number; // ููุฃูุดุทุฉ ุงููุชุนููุฉ ุจุงููุจุงูุบ

  @Column({ name: 'reference_id', nullable: true })
  referenceId: string; // ูุนุฑู ูุฑุฌุนู (ูุซู ูุนุฑู ุงูุทูุจ ุฃู ุงููุนุงููุฉ)

  @CreateDateColumn({ name: 'created_at' })
  createdAt: Date;

  // ุงูุนูุงูุงุช
  @ManyToOne(() => User, user => user.activities)
  @JoinColumn({ name: 'user_id' })
  user: User;

  // ุงูุทุฑู ุงููุณุงุนุฏุฉ
  getActivityIcon(): string {
    const icons = {
      [ActivityType.ACCOUNT_CREATED]: '๐',
      [ActivityType.LOGIN]: '๐',
      [ActivityType.LOGOUT]: '๐',
      [ActivityType.COINS_CLAIMED]: '๐ฐ',
      [ActivityType.PACKAGE_PURCHASED]: '๐ฆ',
      [ActivityType.PACKAGE_ACTIVATED]: 'โ',
      [ActivityType.REFERRAL_MADE]: '๐ฅ',
      [ActivityType.REFERRAL_BONUS_RECEIVED]: '๐',
      [ActivityType.TASK_COMPLETED]: 'โ๏ธ',
      [ActivityType.WITHDRAWAL_REQUESTED]: '๐ธ',
      [ActivityType.WITHDRAWAL_COMPLETED]: 'โ',
      [ActivityType.SECURITY_EVENT]: '๐',
      [ActivityType.ADMIN_ACTION]: 'โ๏ธ',
    };

    return icons[this.activityType] || '๐';
  }

  getActivityTitle(): string {
    const titles = {
      [ActivityType.ACCOUNT_CREATED]: 'ุชู ุฅูุดุงุก ุงูุญุณุงุจ',
      [ActivityType.LOGIN]: 'ุชุณุฌูู ุฏุฎูู',
      [ActivityType.LOGOUT]: 'ุชุณุฌูู ุฎุฑูุฌ',
      [ActivityType.COINS_CLAIMED]: 'ูุทุงูุจุฉ ุจุงูุนููุงุช',
      [ActivityType.PACKAGE_PURCHASED]: 'ุดุฑุงุก ุจุงูุฉ',
      [ActivityType.PACKAGE_ACTIVATED]: 'ุชูุนูู ุจุงูุฉ',
      [ActivityType.REFERRAL_MADE]: 'ุฅุญุงูุฉ ุฌุฏูุฏุฉ',
      [ActivityType.REFERRAL_BONUS_RECEIVED]: 'ููุงูุฃุฉ ุฅุญุงูุฉ',
      [ActivityType.TASK_COMPLETED]: 'ุฅููุงู ูููุฉ',
      [ActivityType.WITHDRAWAL_REQUESTED]: 'ุทูุจ ุณุญุจ',
      [ActivityType.WITHDRAWAL_COMPLETED]: 'ุงูุชูุงู ุงูุณุญุจ',
      [ActivityType.SECURITY_EVENT]: 'ุญุฏุซ ุฃููู',
      [ActivityType.ADMIN_ACTION]: 'ุฅุฌุฑุงุก ุฅุฏุงุฑู',
    };

    return titles[this.activityType] || 'ูุดุงุท ุบูุฑ ูุนุฑูู';
  }

  isRecentActivity(): boolean {
    const now = new Date();
    const diffTime = now.getTime() - this.createdAt.getTime();
    const diffHours = diffTime / (1000 * 60 * 60);
    
    return diffHours <= 24; // ูุดุงุท ุญุฏูุซ ุฅุฐุง ูุงู ุฎูุงู ุขุฎุฑ 24 ุณุงุนุฉ
  }

  isCriticalActivity(): boolean {
    const criticalActivities = [
      ActivityType.SECURITY_EVENT,
      ActivityType.WITHDRAWAL_REQUESTED,
      ActivityType.ADMIN_ACTION,
    ];

    return criticalActivities.includes(this.activityType);
  }

  getFormattedAmount(): string {
    if (!this.amount) return '';
    
    return `${this.amount.toFixed(2)} ุนููุฉ`;
  }

  getTimeAgo(): string {
    const now = new Date();
    const diffTime = now.getTime() - this.createdAt.getTime();
    const diffMinutes = Math.floor(diffTime / (1000 * 60));
    const diffHours = Math.floor(diffMinutes / 60);
    const diffDays = Math.floor(diffHours / 24);

    if (diffMinutes < 1) return 'ุงูุขู';
    if (diffMinutes < 60) return `ููุฐ ${diffMinutes} ุฏูููุฉ`;
    if (diffHours < 24) return `ููุฐ ${diffHours} ุณุงุนุฉ`;
    if (diffDays < 30) return `ููุฐ ${diffDays} ููู`;
    
    return this.createdAt.toLocaleDateString('ar-SA');
  }
}

